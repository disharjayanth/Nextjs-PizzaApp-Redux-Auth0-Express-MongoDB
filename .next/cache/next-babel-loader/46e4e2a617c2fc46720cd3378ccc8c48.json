{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { SendMessage, ClearMessage } from '../store/action';\n\nvar Contact = /*#__PURE__*/function (_Component) {\n  _inherits(Contact, _Component);\n\n  var _super = _createSuper(Contact);\n\n  function Contact() {\n    var _this;\n\n    _classCallCheck(this, Contact);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      msgDone: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (values, actions) {\n      _this.props.dispatch(SendMessage(values)).then(function () {\n        _this.setState({\n          msgDone: true\n        });\n\n        actions.setSubmitting(false);\n        actions.resetForm();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRules\", function (values) {\n      var errors = {};\n\n      for (var prop in values) {\n        if (!values[prop]) {\n          errors[prop] = \"\".concat(prop.charAt(0).toUpperCase()).concat(prop.slice(1), \" is required. Please enter.\");\n        }\n      }\n\n      var reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (!reg.test(values.email)) {\n        errors.email = \"Not a valid email.\";\n      }\n\n      return errors;\n    });\n\n    return _this;\n  }\n\n  _createClass(Contact, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.dispatch(ClearMessage());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"title_page\"\n      }, __jsx(\"h1\", null, \"Contact Us\")), __jsx(\"div\", {\n        className: \"content_wrapper\"\n      }, __jsx(\"div\", {\n        className: \"inner\"\n      }, __jsx(\"h1\", null, \"Feel free to contact us\"), !this.state.msgDone ? __jsx(Formik, {\n        initialValues: {\n          name: '',\n          email: '',\n          message: ''\n        },\n        validate: function validate(values) {\n          return _this2.handleRules(values);\n        },\n        onSubmit: function onSubmit(values, actions) {\n          return _this2.handleSubmit(values, actions);\n        }\n      }, function (_ref) {\n        var errors = _ref.errors,\n            values = _ref.values,\n            handleChange = _ref.handleChange,\n            handleBlur = _ref.handleBlur,\n            handleSubmit = _ref.handleSubmit,\n            isSubmitting = _ref.isSubmitting,\n            touched = _ref.touched;\n        return __jsx(\"form\", {\n          onSubmit: handleSubmit\n        }, __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"label\", null, \"Name\"), __jsx(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          name: \"name\",\n          placeholder: \"Please enter your name here\",\n          value: values.name,\n          onBlur: handleBlur,\n          onChange: handleChange\n        }), errors.name && touched.name ? __jsx(\"div\", {\n          className: \"error_label\"\n        }, errors.name) : null), __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"label\", null, \"Email\"), __jsx(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          name: \"email\",\n          placeholder: \"Please enter your email here\",\n          value: values.email,\n          onBlur: handleBlur,\n          onChange: handleChange\n        }), errors.email && touched.email ? __jsx(\"div\", {\n          className: \"error_label\"\n        }, errors.email) : null), __jsx(\"div\", {\n          className: \"form-group\"\n        }, __jsx(\"label\", null, \"Write a message here\"), __jsx(\"textarea\", {\n          className: \"form-control\",\n          name: \"message\",\n          placeholder: \"Please enter your message here\",\n          value: values.message,\n          onBlur: handleBlur,\n          onChange: handleChange\n        }), errors.message && touched.message ? __jsx(\"div\", {\n          className: \"error_label\"\n        }, errors.message) : null), __jsx(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          disabled: isSubmitting\n        }, \"Submit\"));\n      }) : __jsx(\"div\", null, \"We will contact you shortly.\"))));\n    }\n  }]);\n\n  return Contact;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    msg: state.msg\n  };\n};\n\nexport default connect(mapStateToProps)(Contact);","map":{"version":3,"sources":["/Users/disharjayantha/Desktop/projects,practise/Nextjs-PizzaApp/pages/contact.js"],"names":["React","Component","Formik","connect","SendMessage","ClearMessage","Contact","msgDone","values","actions","props","dispatch","then","setState","setSubmitting","resetForm","errors","prop","charAt","toUpperCase","slice","reg","test","email","state","name","message","handleRules","handleSubmit","handleChange","handleBlur","isSubmitting","touched","mapStateToProps","msg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Formik } from 'formik'\nimport { connect } from 'react-redux'\nimport { SendMessage, ClearMessage } from '../store/action'\n\n\nclass Contact extends Component {\n\n    state = {\n        msgDone: false\n    }\n\n    handleSubmit = (values, actions) => {\n        this.props.dispatch(SendMessage(values)).then(() => {\n            this.setState({\n                msgDone: true\n            })\n            actions.setSubmitting(false)\n            actions.resetForm()\n        })\n    }\n\n    handleRules = (values) => {\n        let errors = {}\n\n        for(let prop in values) {\n            if(!values[prop]) {\n                errors[prop] = `${prop.charAt(0).toUpperCase()}${prop.slice(1)} is required. Please enter.`\n            }\n        }\n\n        let reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\n        if(!reg.test(values.email)) {\n            errors.email = \"Not a valid email.\"\n        }\n\n        return errors\n    }\n\n    componentWillUnmount() {\n        this.props.dispatch(ClearMessage())\n    }\n\n    render() {\n        return (\n            <>\n             <div className=\"title_page\">\n                <h1>Contact Us</h1>\n             </div>\n             <div className=\"content_wrapper\">\n                <div className=\"inner\">\n                    <h1>Feel free to contact us</h1>\n\n                    {!this.state.msgDone\n                    ?\n                    <Formik\n                    initialValues={{ name: '', email: '', message: '' }}\n                    validate={ (values) => this.handleRules(values) }\n                    onSubmit={ (values, actions) => this.handleSubmit(values, actions) }\n                    >\n                        { ({ errors, values, handleChange, handleBlur, handleSubmit, isSubmitting, touched }) => {\n                            return(\n                                <form onSubmit={handleSubmit}>\n\n                                    <div className=\"form-group\">\n                                        <label>Name</label>\n                                        <input \n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"name\"\n                                        placeholder=\"Please enter your name here\"\n                                        value={values.name}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                        />\n                                        { errors.name && touched.name \n                                        ? \n                                        <div className=\"error_label\">\n                                            {errors.name}\n                                        </div>\n                                        :\n                                        null    \n                                        }\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label>Email</label>\n                                        <input \n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"email\"\n                                        placeholder=\"Please enter your email here\"\n                                        value={values.email}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                        />\n                                        { errors.email && touched.email \n                                        ? \n                                        <div className=\"error_label\">\n                                            {errors.email}\n                                        </div>\n                                        :\n                                        null    \n                                        }\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label>Write a message here</label>\n                                        <textarea \n                                        className=\"form-control\"\n                                        name=\"message\"\n                                        placeholder=\"Please enter your message here\"\n                                        value={values.message}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                        ></textarea>\n                                        { errors.message && touched.message \n                                        ? \n                                        <div className=\"error_label\">\n                                            {errors.message}\n                                        </div>\n                                        :\n                                        null    \n                                        }\n                                    </div>\n\n                                    <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    disabled={isSubmitting}\n                                    >\n                                        Submit\n                                    </button>\n                                </form>\n                            )\n                        }}\n                    </Formik>\n                    :\n                    <div>\n                         We will contact you shortly.\n                    </div>\n                    }\n\n                    \n                </div>\n             </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        msg: state.msg\n    }\n}\n\nexport default connect(mapStateToProps)(Contact)"]},"metadata":{},"sourceType":"module"}