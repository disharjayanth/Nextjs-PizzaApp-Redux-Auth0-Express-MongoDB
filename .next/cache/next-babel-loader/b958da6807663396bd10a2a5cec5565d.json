{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport getConfig from 'next/config';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar Auth0 = /*#__PURE__*/function () {\n  function Auth0() {\n    _classCallCheck(this, Auth0);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: 'dev-tn3cyve4.auth0.com',\n      clientID: \"\".concat(publicRuntimeConfig.client_id),\n      redirectUri: \"\".concat(publicRuntimeConfig.base_url, \"/login-success\"),\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n  }\n\n  _createClass(Auth0, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult);\n\n            resolve();\n          } else if (err) {\n            reject(err);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      var expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      Cookies.set('x-jwt-exp', expiresAt);\n      Cookies.set('x-jwt', authResult.idToken);\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }]);\n\n  return Auth0;\n}();\n\nvar auth0Serv = new Auth0();\nexport default auth0Serv;","map":{"version":3,"sources":["/Users/disharjayantha/Desktop/projects,practise/Nextjs-PizzaApp/lib/appAuth.js"],"names":["auth0","Cookies","axios","getConfig","publicRuntimeConfig","Auth0","WebAuth","domain","clientID","client_id","redirectUri","base_url","responseType","scope","handleAuthentication","bind","Promise","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","expiresAt","JSON","stringify","expiresIn","Date","getTime","set","authorize","auth0Serv"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;iBACgCA,SAAS,E;IAAjCC,mB,cAAAA,mB;;IAEFC,K;AACF,mBAAc;AAAA;;AACV,SAAKL,KAAL,GAAa,IAAIA,KAAK,CAACM,OAAV,CAAkB;AAC3BC,MAAAA,MAAM,EAAE,wBADmB;AAE3BC,MAAAA,QAAQ,YAAKJ,mBAAmB,CAACK,SAAzB,CAFmB;AAG3BC,MAAAA,WAAW,YAAKN,mBAAmB,CAACO,QAAzB,mBAHgB;AAI3BC,MAAAA,YAAY,EAAE,gBAJa;AAK3BC,MAAAA,KAAK,EAAE;AALoB,KAAlB,CAAb;AAQA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACH;;;;2CAEsB;AAAA;;AACnB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAA,KAAI,CAAClB,KAAL,CAAWmB,SAAX,CAAqB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACtC,cAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC9D,YAAA,KAAI,CAACC,UAAL,CAAgBH,UAAhB;;AACAJ,YAAAA,OAAO;AACR,WAHD,MAGO,IAAIG,GAAJ,EAAS;AACdF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACD;AACF,SAPH;AAQH,OATM,CAAP;AAUH;;;+BAEUC,U,EAAY;AACnB,UAAII,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBN,UAAU,CAACO,SAAX,GAAuB,IAAxB,GAAgC,IAAIC,IAAJ,GAAWC,OAAX,EAA/C,CAAhB;AACA7B,MAAAA,OAAO,CAAC8B,GAAR,CAAY,WAAZ,EAAyBN,SAAzB;AACAxB,MAAAA,OAAO,CAAC8B,GAAR,CAAY,OAAZ,EAAqBV,UAAU,CAACE,OAAhC;AACH;;;4BAEO;AACJ,WAAKvB,KAAL,CAAWgC,SAAX;AACH;;;;;;AAGL,IAAMC,SAAS,GAAG,IAAI5B,KAAJ,EAAlB;AACA,eAAe4B,SAAf","sourcesContent":["import auth0 from 'auth0-js'\nimport Cookies from 'js-cookie'\nimport axios from 'axios'\n\nimport getConfig from 'next/config'\nconst { publicRuntimeConfig } = getConfig()\n\nclass Auth0 {\n    constructor() {\n        this.auth0 = new auth0.WebAuth({\n            domain: 'dev-tn3cyve4.auth0.com',\n            clientID: `${publicRuntimeConfig.client_id}`,\n            redirectUri: `${publicRuntimeConfig.base_url}/login-success`,\n            responseType: 'token id_token',\n            scope: 'openid'\n        })\n\n        this.handleAuthentication = this.handleAuthentication.bind(this)\n    }\n\n    handleAuthentication() {\n        return new Promise((resolve, reject) => {\n            this.auth0.parseHash((err, authResult) => {\n                if (authResult && authResult.accessToken && authResult.idToken) {\n                  this.setSession(authResult);\n                  resolve()\n                } else if (err) {\n                  reject(err)\n                }\n              });\n        })\n    }\n\n    setSession(authResult) {\n        let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime())\n        Cookies.set('x-jwt-exp', expiresAt)\n        Cookies.set('x-jwt', authResult.idToken)\n    }\n\n    login() {\n        this.auth0.authorize()\n    }\n}\n\nconst auth0Serv = new Auth0()\nexport default auth0Serv"]},"metadata":{},"sourceType":"module"}