{"ast":null,"code":"import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'dev-tn3cyve4.auth0.com',\n      clientID: `${publicRuntimeConfig.client_id}`,\n      redirectUri: `${publicRuntimeConfig.base_url}/login-success`,\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  setSession(authResult) {\n    let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n    Cookies.set('x-jwt-exp', expiresAt);\n    Cookies.set('x-jwt', authResult.idToken);\n  }\n\n  async getJWST() {\n    const res = await axios.get('https://dev-tn3cyve4.auth0.com/.well-known/jwks.json');\n    const jwks = res.data;\n    return jwks;\n  }\n\n  certToPEM(cert) {\n    cert = cert.match(/.{1,64}/g).join('\\n');\n    cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`;\n    return cert;\n  }\n\n  async verifyToken(token) {\n    if (token) {\n      // const decodeToken = jwt.decode(token, { complete: true })\n      const jwks = await this.getJWST();\n      const certificate = this.certToPEM(jwks.keys[0].x5c[0]);\n\n      try {\n        const decodedVerify = jwt.verify(token, certificate);\n        const expiredAt = decodedVerify.exp * 1000;\n        return decodedVerify && new Date().getTime() < expiredAt ? true : false;\n      } catch {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  async isAuthenticated(req) {\n    if (false) {\n      const token = Cookies.get('x-jwt');\n      const verifyToken = await this.verifyToken(token);\n      return verifyToken;\n    } else {\n      let token = getCooksFromReq(req, 'x-jwt');\n      const verifyToken = await this.verifyToken(token);\n      return verifyToken;\n    }\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n}\n\nconst auth0Serv = new Auth0();\nexport default auth0Serv;","map":{"version":3,"sources":["/Users/disharjayantha/Desktop/projects,practise/Nextjs-PizzaApp/lib/appAuth.js"],"names":["auth0","Cookies","axios","getConfig","publicRuntimeConfig","Auth0","constructor","WebAuth","domain","clientID","client_id","redirectUri","base_url","responseType","scope","handleAuthentication","bind","Promise","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","expiresAt","JSON","stringify","expiresIn","Date","getTime","set","getJWST","res","get","jwks","data","certToPEM","cert","match","join","verifyToken","token","certificate","keys","x5c","decodedVerify","jwt","verify","expiredAt","exp","isAuthenticated","req","getCooksFromReq","login","authorize","auth0Serv"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC;;AAEA,MAAME,KAAN,CAAY;AACRC,EAAAA,WAAW,GAAG;AACV,SAAKN,KAAL,GAAa,IAAIA,KAAK,CAACO,OAAV,CAAkB;AAC3BC,MAAAA,MAAM,EAAE,wBADmB;AAE3BC,MAAAA,QAAQ,EAAG,GAAEL,mBAAmB,CAACM,SAAU,EAFhB;AAG3BC,MAAAA,WAAW,EAAG,GAAEP,mBAAmB,CAACQ,QAAS,gBAHlB;AAI3BC,MAAAA,YAAY,EAAE,gBAJa;AAK3BC,MAAAA,KAAK,EAAE;AALoB,KAAlB,CAAb;AAQA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACH;;AAEDD,EAAAA,oBAAoB,GAAG;AACnB,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAKnB,KAAL,CAAWoB,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtC,YAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC9D,eAAKC,UAAL,CAAgBH,UAAhB;AACAJ,UAAAA,OAAO;AACR,SAHD,MAGO,IAAIG,GAAJ,EAAS;AACdF,UAAAA,MAAM,CAACE,GAAD,CAAN;AACD;AACF,OAPH;AAQH,KATM,CAAP;AAUH;;AAEDI,EAAAA,UAAU,CAACH,UAAD,EAAa;AACnB,QAAII,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBN,UAAU,CAACO,SAAX,GAAuB,IAAxB,GAAgC,IAAIC,IAAJ,GAAWC,OAAX,EAA/C,CAAhB;AACA9B,IAAAA,OAAO,CAAC+B,GAAR,CAAY,WAAZ,EAAyBN,SAAzB;AACAzB,IAAAA,OAAO,CAAC+B,GAAR,CAAY,OAAZ,EAAqBV,UAAU,CAACE,OAAhC;AACH;;AAED,QAAMS,OAAN,GAAgB;AACZ,UAAMC,GAAG,GAAG,MAAMhC,KAAK,CAACiC,GAAN,CAAU,sDAAV,CAAlB;AACA,UAAMC,IAAI,GAAGF,GAAG,CAACG,IAAjB;AACA,WAAOD,IAAP;AACH;;AAEDE,EAAAA,SAAS,CAACC,IAAD,EAAO;AACZA,IAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,UAAX,EAAuBC,IAAvB,CAA4B,IAA5B,CAAP;AACAF,IAAAA,IAAI,GAAI,gCAA+BA,IAAK,+BAA5C;AACA,WAAOA,IAAP;AACD;;AAEH,QAAMG,WAAN,CAAkBC,KAAlB,EAAyB;AACrB,QAAGA,KAAH,EAAU;AACN;AACA,YAAMP,IAAI,GAAG,MAAM,KAAKH,OAAL,EAAnB;AAEA,YAAMW,WAAW,GAAG,KAAKN,SAAL,CAAeF,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaC,GAAb,CAAiB,CAAjB,CAAf,CAApB;;AAEA,UAAI;AACA,cAAMC,aAAa,GAAGC,GAAG,CAACC,MAAJ,CAAWN,KAAX,EAAkBC,WAAlB,CAAtB;AAEA,cAAMM,SAAS,GAAGH,aAAa,CAACI,GAAd,GAAoB,IAAtC;AAEA,eAAQJ,aAAa,IAAI,IAAIjB,IAAJ,GAAWC,OAAX,KAAuBmB,SAAzC,GAAuD,IAAvD,GAA8D,KAArE;AAEH,OAPD,CAOE,MAAK;AACH,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH;;AAED,QAAME,eAAN,CAAsBC,GAAtB,EAA2B;AACvB,eAAoB;AAChB,YAAMV,KAAK,GAAG1C,OAAO,CAACkC,GAAR,CAAY,OAAZ,CAAd;AACA,YAAMO,WAAW,GAAG,MAAM,KAAKA,WAAL,CAAiBC,KAAjB,CAA1B;AACA,aAAOD,WAAP;AACH,KAJD,MAIO;AACH,UAAIC,KAAK,GAAGW,eAAe,CAACD,GAAD,EAAM,OAAN,CAA3B;AACA,YAAMX,WAAW,GAAG,MAAM,KAAKA,WAAL,CAAiBC,KAAjB,CAA1B;AACA,aAAOD,WAAP;AACH;AACJ;;AAEDa,EAAAA,KAAK,GAAG;AACJ,SAAKvD,KAAL,CAAWwD,SAAX;AACH;;AA/EO;;AAkFZ,MAAMC,SAAS,GAAG,IAAIpD,KAAJ,EAAlB;AACA,eAAeoD,SAAf","sourcesContent":["import auth0 from 'auth0-js'\nimport Cookies from 'js-cookie'\nimport axios from 'axios'\n\nimport getConfig from 'next/config'\nconst { publicRuntimeConfig } = getConfig()\n\nclass Auth0 {\n    constructor() {\n        this.auth0 = new auth0.WebAuth({\n            domain: 'dev-tn3cyve4.auth0.com',\n            clientID: `${publicRuntimeConfig.client_id}`,\n            redirectUri: `${publicRuntimeConfig.base_url}/login-success`,\n            responseType: 'token id_token',\n            scope: 'openid'\n        })\n\n        this.handleAuthentication = this.handleAuthentication.bind(this)\n    }\n\n    handleAuthentication() {\n        return new Promise((resolve, reject) => {\n            this.auth0.parseHash((err, authResult) => {\n                if (authResult && authResult.accessToken && authResult.idToken) {\n                  this.setSession(authResult)\n                  resolve()\n                } else if (err) {\n                  reject(err)\n                }\n              });\n        })\n    }\n\n    setSession(authResult) {\n        let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime())\n        Cookies.set('x-jwt-exp', expiresAt)\n        Cookies.set('x-jwt', authResult.idToken)\n    }\n\n    async getJWST() {\n        const res = await axios.get('https://dev-tn3cyve4.auth0.com/.well-known/jwks.json')\n        const jwks = res.data\n        return jwks\n    }\n\n    certToPEM(cert) {\n        cert = cert.match(/.{1,64}/g).join('\\n');\n        cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`;\n        return cert;\n      }\n\n    async verifyToken(token) {\n        if(token) {\n            // const decodeToken = jwt.decode(token, { complete: true })\n            const jwks = await this.getJWST()\n\n            const certificate = this.certToPEM(jwks.keys[0].x5c[0])\n            \n            try {\n                const decodedVerify = jwt.verify(token, certificate)\n                \n                const expiredAt = decodedVerify.exp * 1000\n\n                return (decodedVerify && new Date().getTime() < expiredAt ) ? true : false\n\n            } catch{\n                return false\n            }\n        }\n        return false\n    }\n\n    async isAuthenticated(req) {\n        if(process.browser) {\n            const token = Cookies.get('x-jwt')\n            const verifyToken = await this.verifyToken(token)\n            return verifyToken\n        } else {\n            let token = getCooksFromReq(req, 'x-jwt')\n            const verifyToken = await this.verifyToken(token)\n            return verifyToken\n        }\n    }\n\n    login() {\n        this.auth0.authorize()\n    }\n}\n\nconst auth0Serv = new Auth0()\nexport default auth0Serv"]},"metadata":{},"sourceType":"module"}