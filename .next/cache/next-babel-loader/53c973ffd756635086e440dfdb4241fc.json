{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { SendMessage, ClearMessage } from '../store/action';\n\nclass Contact extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      msgDone: false\n    });\n\n    _defineProperty(this, \"handleSubmit\", (values, actions) => {\n      this.props.dispatch(SendMessage(values)).then(() => {\n        this.setState({\n          msgDone: true\n        });\n        actions.setSubmitting(false);\n        actions.resetForm();\n      });\n    });\n\n    _defineProperty(this, \"handleRules\", values => {\n      let errors = {};\n\n      for (let prop in values) {\n        if (!values[prop]) {\n          errors[prop] = `${prop.charAt(0).toUpperCase()}${prop.slice(1)} is required. Please enter.`;\n        }\n      }\n\n      let reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (!reg.test(values.email)) {\n        errors.email = \"Not a valid email.\";\n      }\n\n      return errors;\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(ClearMessage());\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"title_page\"\n    }, __jsx(\"h1\", null, \"Contact Us\")), __jsx(\"div\", {\n      className: \"content_wrapper\"\n    }, __jsx(\"div\", {\n      className: \"inner\"\n    }, __jsx(\"h1\", null, \"Feel free to contact us\"), !this.state.msgDone ? __jsx(Formik, {\n      initialValues: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      validate: values => this.handleRules(values),\n      onSubmit: (values, actions) => this.handleSubmit(values, actions)\n    }, ({\n      errors,\n      values,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isSubmitting,\n      touched\n    }) => {\n      return __jsx(\"form\", {\n        onSubmit: handleSubmit\n      }, __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", null, \"Name\"), __jsx(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: \"name\",\n        placeholder: \"Please enter your name here\",\n        value: values.name,\n        onBlur: handleBlur,\n        onChange: handleChange\n      }), errors.name && touched.name ? __jsx(\"div\", {\n        className: \"error_label\"\n      }, errors.name) : null), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", null, \"Email\"), __jsx(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: \"email\",\n        placeholder: \"Please enter your email here\",\n        value: values.email,\n        onBlur: handleBlur,\n        onChange: handleChange\n      }), errors.email && touched.email ? __jsx(\"div\", {\n        className: \"error_label\"\n      }, errors.email) : null), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", null, \"Write a message here\"), __jsx(\"textarea\", {\n        className: \"form-control\",\n        name: \"message\",\n        placeholder: \"Please enter your message here\",\n        value: values.message,\n        onBlur: handleBlur,\n        onChange: handleChange\n      }), errors.message && touched.message ? __jsx(\"div\", {\n        className: \"error_label\"\n      }, errors.message) : null), __jsx(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        disabled: isSubmitting\n      }, \"Submit\"));\n    }) : __jsx(\"div\", null, \"We will contact you shortly.\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    msg: state.msg\n  };\n};\n\nexport default connect(mapStateToProps)(Contact);","map":{"version":3,"sources":["/Users/disharjayantha/Desktop/projects,practise/Nextjs-PizzaApp/pages/contact.js"],"names":["React","Component","Formik","connect","SendMessage","ClearMessage","Contact","msgDone","values","actions","props","dispatch","then","setState","setSubmitting","resetForm","errors","prop","charAt","toUpperCase","slice","reg","test","email","componentWillUnmount","render","state","name","message","handleRules","handleSubmit","handleChange","handleBlur","isSubmitting","touched","mapStateToProps","msg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Formik } from 'formik'\nimport { connect } from 'react-redux'\nimport { SendMessage, ClearMessage } from '../store/action'\n\n\nclass Contact extends Component {\n\n    state = {\n        msgDone: false\n    }\n\n    handleSubmit = (values, actions) => {\n        this.props.dispatch(SendMessage(values)).then(() => {\n            this.setState({\n                msgDone: true\n            })\n            actions.setSubmitting(false)\n            actions.resetForm()\n        })\n    }\n\n    handleRules = (values) => {\n        let errors = {}\n\n        for(let prop in values) {\n            if(!values[prop]) {\n                errors[prop] = `${prop.charAt(0).toUpperCase()}${prop.slice(1)} is required. Please enter.`\n            }\n        }\n\n        let reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\n        if(!reg.test(values.email)) {\n            errors.email = \"Not a valid email.\"\n        }\n\n        return errors\n    }\n\n    componentWillUnmount() {\n        this.props.dispatch(ClearMessage())\n    }\n\n    render() {\n        return (\n            <>\n             <div className=\"title_page\">\n                <h1>Contact Us</h1>\n             </div>\n             <div className=\"content_wrapper\">\n                <div className=\"inner\">\n                    <h1>Feel free to contact us</h1>\n\n                    {!this.state.msgDone\n                    ?\n                    <Formik\n                    initialValues={{ name: '', email: '', message: '' }}\n                    validate={ (values) => this.handleRules(values) }\n                    onSubmit={ (values, actions) => this.handleSubmit(values, actions) }\n                    >\n                        { ({ errors, values, handleChange, handleBlur, handleSubmit, isSubmitting, touched }) => {\n                            return(\n                                <form onSubmit={handleSubmit}>\n\n                                    <div className=\"form-group\">\n                                        <label>Name</label>\n                                        <input \n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"name\"\n                                        placeholder=\"Please enter your name here\"\n                                        value={values.name}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                        />\n                                        { errors.name && touched.name \n                                        ? \n                                        <div className=\"error_label\">\n                                            {errors.name}\n                                        </div>\n                                        :\n                                        null    \n                                        }\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label>Email</label>\n                                        <input \n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"email\"\n                                        placeholder=\"Please enter your email here\"\n                                        value={values.email}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                        />\n                                        { errors.email && touched.email \n                                        ? \n                                        <div className=\"error_label\">\n                                            {errors.email}\n                                        </div>\n                                        :\n                                        null    \n                                        }\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label>Write a message here</label>\n                                        <textarea \n                                        className=\"form-control\"\n                                        name=\"message\"\n                                        placeholder=\"Please enter your message here\"\n                                        value={values.message}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                        ></textarea>\n                                        { errors.message && touched.message \n                                        ? \n                                        <div className=\"error_label\">\n                                            {errors.message}\n                                        </div>\n                                        :\n                                        null    \n                                        }\n                                    </div>\n\n                                    <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    disabled={isSubmitting}\n                                    >\n                                        Submit\n                                    </button>\n                                </form>\n                            )\n                        }}\n                    </Formik>\n                    :\n                    <div>\n                         We will contact you shortly.\n                    </div>\n                    }\n\n                    \n                </div>\n             </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        msg: state.msg\n    }\n}\n\nexport default connect(mapStateToProps)(Contact)"]},"metadata":{},"sourceType":"module"}