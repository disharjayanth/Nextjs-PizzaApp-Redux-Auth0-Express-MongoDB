{"ast":null,"code":"import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'dev-tn3cyve4.auth0.com',\n      clientID: `${publicRuntimeConfig.client_id}`,\n      redirectUri: `${publicRuntimeConfig.base_url}/login-success`,\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  setSession(authResult) {\n    let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n    Cookies.set('x-jwt-exp', expiresAt);\n    Cookies.set('x-jwt', authResult.idToken);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n}\n\nconst auth0Serv = new Auth0();\nexport default auth0Serv;","map":{"version":3,"sources":["/Users/disharjayantha/Desktop/projects,practise/Nextjs-PizzaApp/lib/appAuth.js"],"names":["auth0","Cookies","axios","getConfig","publicRuntimeConfig","Auth0","constructor","WebAuth","domain","clientID","client_id","redirectUri","base_url","responseType","scope","handleAuthentication","bind","Promise","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","expiresAt","JSON","stringify","expiresIn","Date","getTime","set","login","authorize","auth0Serv"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC;;AAEA,MAAME,KAAN,CAAY;AACRC,EAAAA,WAAW,GAAG;AACV,SAAKN,KAAL,GAAa,IAAIA,KAAK,CAACO,OAAV,CAAkB;AAC3BC,MAAAA,MAAM,EAAE,wBADmB;AAE3BC,MAAAA,QAAQ,EAAG,GAAEL,mBAAmB,CAACM,SAAU,EAFhB;AAG3BC,MAAAA,WAAW,EAAG,GAAEP,mBAAmB,CAACQ,QAAS,gBAHlB;AAI3BC,MAAAA,YAAY,EAAE,gBAJa;AAK3BC,MAAAA,KAAK,EAAE;AALoB,KAAlB,CAAb;AAQA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACH;;AAEDD,EAAAA,oBAAoB,GAAG;AACnB,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAKnB,KAAL,CAAWoB,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtC,YAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC9D,eAAKC,UAAL,CAAgBH,UAAhB;AACAJ,UAAAA,OAAO;AACR,SAHD,MAGO,IAAIG,GAAJ,EAAS;AACdF,UAAAA,MAAM,CAACE,GAAD,CAAN;AACD;AACF,OAPH;AAQH,KATM,CAAP;AAUH;;AAEDI,EAAAA,UAAU,CAACH,UAAD,EAAa;AACnB,QAAII,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBN,UAAU,CAACO,SAAX,GAAuB,IAAxB,GAAgC,IAAIC,IAAJ,GAAWC,OAAX,EAA/C,CAAhB;AACA9B,IAAAA,OAAO,CAAC+B,GAAR,CAAY,WAAZ,EAAyBN,SAAzB;AACAzB,IAAAA,OAAO,CAAC+B,GAAR,CAAY,OAAZ,EAAqBV,UAAU,CAACE,OAAhC;AACH;;AAEDS,EAAAA,KAAK,GAAG;AACJ,SAAKjC,KAAL,CAAWkC,SAAX;AACH;;AAlCO;;AAqCZ,MAAMC,SAAS,GAAG,IAAI9B,KAAJ,EAAlB;AACA,eAAe8B,SAAf","sourcesContent":["import auth0 from 'auth0-js'\nimport Cookies from 'js-cookie'\nimport axios from 'axios'\n\nimport getConfig from 'next/config'\nconst { publicRuntimeConfig } = getConfig()\n\nclass Auth0 {\n    constructor() {\n        this.auth0 = new auth0.WebAuth({\n            domain: 'dev-tn3cyve4.auth0.com',\n            clientID: `${publicRuntimeConfig.client_id}`,\n            redirectUri: `${publicRuntimeConfig.base_url}/login-success`,\n            responseType: 'token id_token',\n            scope: 'openid'\n        })\n\n        this.handleAuthentication = this.handleAuthentication.bind(this)\n    }\n\n    handleAuthentication() {\n        return new Promise((resolve, reject) => {\n            this.auth0.parseHash((err, authResult) => {\n                if (authResult && authResult.accessToken && authResult.idToken) {\n                  this.setSession(authResult);\n                  resolve()\n                } else if (err) {\n                  reject(err)\n                }\n              });\n        })\n    }\n\n    setSession(authResult) {\n        let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime())\n        Cookies.set('x-jwt-exp', expiresAt)\n        Cookies.set('x-jwt', authResult.idToken)\n    }\n\n    login() {\n        this.auth0.authorize()\n    }\n}\n\nconst auth0Serv = new Auth0()\nexport default auth0Serv"]},"metadata":{},"sourceType":"module"}